<div class="container">
  <div class="row">
    <div class="col-md-8">
      <h1 class="mb-4">
        🔍 クイズ #<%= @quiz_session.id %>
        <% if @quiz_session.waiting? %>
          <span class="badge bg-warning text-dark">待機中</span>
        <% elsif @quiz_session.started? %>
          <span class="badge bg-success">プレイ中</span>
        <% else %>
          <span class="badge bg-secondary">終了</span>
        <% end %>
      </h1>

      <!-- ゲーム状態に応じた表示 -->
      <% if @quiz_session.waiting? %>
        <div class="alert alert-info">
          <h5 class="alert-heading">⏳ ゲーム開始を待っています</h5>
          <p>作成者: <%= @quiz_session.creator.name %></p>
          
          <!-- 接続状況表示 -->
          <div id="connection-status" class="mb-3">
            <div class="connection-info">
              <span class="connection-label">接続状況:</span>
              <span id="connected-count"><%= @quiz_session.quiz_participants.connected.count %></span>
              /
              <span id="total-count"><%= @quiz_session.quiz_participants.count %></span>
              人が接続済み
            </div>
            <div class="progress mt-2" style="height: 8px;">
              <div id="connection-progress" class="progress-bar bg-success" role="progressbar" 
                   style="width: <%= @quiz_session.quiz_participants.count > 0 ? (@quiz_session.quiz_participants.connected.count.to_f / @quiz_session.quiz_participants.count * 100) : 0 %>%"></div>
            </div>
            
            <!-- リロードボタンと自動更新表示 -->
            <div class="reload-button-container mt-3 text-center">
              <button id="reload-btn" class="btn btn-outline-primary btn-sm" onclick="location.reload()">
                <span class="btn-icon">🔄</span>
                <span class="btn-text">接続状況を更新</span>
              </button>
              <div id="auto-reload-info" class="auto-reload-info mt-2">
                <small class="text-muted">
                  自動更新まであと <span id="countdown">10</span> 秒
                </small>
              </div>
            </div>
          </div>
          
          <% if @quiz_session.creator == current_user && @quiz_session.participants.count >= 2 %>
            <div id="start-button-container">
              <% if @quiz_session.all_participants_connected? %>
                <button id="start-game-btn" class="btn btn-success btn-lg" onclick="startGame()">
                  <span class="btn-icon">🚀</span>
                  <span class="btn-text">ゲームを開始</span>
                </button>
              <% else %>
                <button id="start-game-btn" class="btn btn-secondary btn-lg" disabled>
                  <span class="btn-icon">⏳</span>
                  <span class="btn-text">全員の接続を待機中...</span>
                </button>
              <% end %>
            </div>
          <% elsif @quiz_session.creator == current_user %>
            <p class="text-muted">他の参加者を待っています...（最低2人必要）</p>
          <% elsif @can_join %>
            <%= button_to "参加する", join_quiz_session_path(@quiz_session), method: :patch, class: "btn btn-primary btn-lg" %>
          <% elsif @participant %>
            <div class="participant-waiting">
              <p>参加済み - ゲーム開始を待っています</p>
              <div id="participant-connection-status" class="mt-2">
                <% if @participant.connected? %>
                  <span class="badge bg-success">✓ 接続済み</span>
                <% else %>
                  <span class="badge bg-warning">⏳ 接続中...</span>
                <% end %>
              </div>
            </div>
          <% end %>
        </div>

      <% elsif @quiz_session.started? %>
        <!-- イケイケヒント表示 -->
        <div class="hint-container mb-4">
          <div class="hint-main-card">
            <div class="hint-header">
              <div class="hint-number-badge">
                <span class="hint-number">#<%= @quiz_session.current_hint_index + 1 %></span>
              </div>
              <h2 class="hint-title">
                <span class="hint-icon">💡</span>
                CURRENT HINT
              </h2>
            </div>
            
            <div class="hint-body" id="current-hint">
              <% if @current_hint %>
                <div class="hint-content">
                  <div class="hint-meta">
                    <div class="category-badge">
                      <span class="category-text"><%= @current_hint.category_name %></span>
                    </div>
                    <div class="level-indicator">
                      <div class="level-label">DIFFICULTY</div>
                      <div class="level-value level-<%= @current_hint.level %>">
                        <% @current_hint.level.times do %>⭐<% end %>
                      </div>
                    </div>
                  </div>
                  
                  <div class="feature-display">
                    <div class="feature-text">
                      "<%= @current_hint.feature %>"
                    </div>
                    <div class="hint-decoration">
                      <div class="decoration-element">🎯</div>
                      <div class="decoration-element">✨</div>
                      <div class="decoration-element">🔥</div>
                    </div>
                  </div>
                </div>
              <% else %>
                <div class="no-hint-message">
                  <div class="no-hint-icon">🤔</div>
                  <p>ヒントがありません</p>
                </div>
              <% end %>
            </div>
          </div>
        </div>

        <!-- イケイケ回答フォーム -->
        <% if @participant && !@participant.answered? && !@quiz_session.quiz_answers.where(user: current_user, hint_index: @quiz_session.current_hint_index).exists? %>
          <div class="answer-container mb-4">
            <div class="answer-main-card">
              <div class="answer-header">
                <div class="answer-icon">🎯</div>
                <h3 class="answer-title">YOUR GUESS</h3>
                <div class="miss-counter">
                  <span class="miss-label">MISSES</span>
                  <div class="miss-value">
                    <span class="miss-number"><%= @participant.miss_count %></span>
                    <span class="miss-icon">❌</span>
                  </div>
                </div>
              </div>
              
              <div class="answer-body">
                <form action="<%= submit_answer_quiz_session_path(@quiz_session) %>" method="post" id="answer-form" data-turbo="false" data-method="post">
                  <%= hidden_field_tag :authenticity_token, form_authenticity_token %>
                  <input type="hidden" name="_method" value="post">
                  
                  <div class="fighter-search-section">
                    <div class="search-label-container">
                      <label for="fighter_name" class="search-label">
                        <span class="search-icon">🔍</span>
                        Fighter Name (Hiragana)
                      </label>
                    </div>
                    
                    <div class="search-input-wrapper">
                      <input type="text" name="fighter_name" class="fighter-search-input" id="fighter-search" placeholder="ひらがなで入力してください...">
                      <div class="search-decoration">
                        <div class="search-glow"></div>
                      </div>
                    </div>
                    
                    <div id="fighter-suggestions" class="suggestions-container"></div>
                  </div>
                  
                  <input type="hidden" name="fighter_id" id="fighter-id">
                  
                  <div class="action-buttons">
                    <button type="submit" class="submit-btn" id="submit-answer" disabled>
                      <span class="btn-icon">⚡</span>
                      <span class="btn-text">SUBMIT ANSWER</span>
                      <div class="btn-glow"></div>
                    </button>
                  </div>
                </form>
                
                <!-- パスボタン -->
                <div class="pass-section">
                  <button type="button" class="pass-btn" id="pass-btn">
                    <span class="pass-icon">⏭️</span>
                    <span class="btn-text pass-text">PASS THIS HINT</span>
                  </button>
                </div>
              </div>
            </div>
          </div>
        <% elsif @participant && @participant.answered? %>
          <!-- 正解状態 -->
          <div class="status-container mb-4">
            <div class="status-card success-status">
              <div class="status-header">
                <div class="status-icon success-icon">🎉</div>
                <h3 class="status-title">CORRECT!</h3>
              </div>
              <div class="status-body">
                <p class="status-message">あなたは正解しました！</p>
                <div class="waiting-animation">
                  <div class="waiting-text">他の参加者を待っています</div>
                  <div class="loading-dots">
                    <span>.</span><span>.</span><span>.</span>
                  </div>
                </div>
              </div>
              <div class="status-decoration">
                <div class="celebration-particle">✨</div>
                <div class="celebration-particle">🎊</div>
                <div class="celebration-particle">⭐</div>
              </div>
            </div>
          </div>
        <% elsif @participant && @quiz_session.quiz_answers.where(user: current_user, hint_index: @quiz_session.current_hint_index).exists? %>
          <% current_answer = @quiz_session.quiz_answers.where(user: current_user, hint_index: @quiz_session.current_hint_index).last %>
          <div class="status-container mb-4">
            <% if current_answer.passed? %>
              <!-- パス状態 -->
              <div class="status-card pass-status">
                <div class="status-header">
                  <div class="status-icon pass-icon">⏭️</div>
                  <h3 class="status-title">PASSED</h3>
                </div>
                <div class="status-body">
                  <p class="status-message">このヒントをパスしました</p>
                  <div class="waiting-animation">
                    <div class="waiting-text">次のヒントを待っています</div>
                    <div class="loading-dots">
                      <span>.</span><span>.</span><span>.</span>
                    </div>
                  </div>
                </div>
              </div>
            <% else %>
              <!-- 不正解状態 -->
              <div class="status-card incorrect-status">
                <div class="status-header">
                  <div class="status-icon incorrect-icon">😤</div>
                  <h3 class="status-title">INCORRECT</h3>
                </div>
                <div class="status-body">
                  <p class="status-message">残念！不正解でした</p>
                  <div class="waiting-animation">
                    <div class="waiting-text">次のチャンスを待っています</div>
                    <div class="loading-dots">
                      <span>.</span><span>.</span><span>.</span>
                    </div>
                  </div>
                </div>
                <div class="status-decoration">
                  <div class="incorrect-particle">💥</div>
                </div>
              </div>
            <% end %>
          </div>
        <% end %>

      <% else %>
        <!-- 終了時の結果表示 - イケイケデザイン -->
        <div class="quiz-result-container mb-4">
          <!-- メインの結果カード -->
          <div class="result-main-card">
            <div class="result-header">
              <div class="header-content">
                <h2 class="result-title">
                  <span class="title-icon">🎯</span>
                  QUIZ COMPLETED!
                </h2>
                <div class="completion-badge">
                  <span class="badge-text">GAME OVER</span>
                </div>
              </div>
            </div>
            
            <div class="result-body">
              <!-- 正解選手の表示 -->
              <div class="fighter-reveal-section">
                <div class="fighter-info-container">
                  <div class="fighter-image-wrapper">
                    <% if @quiz_session.target_fighter.image_url.present? %>
                      <img src="<%= @quiz_session.target_fighter.image_url %>" 
                           alt="<%= @quiz_session.target_fighter.display_name %>" 
                           class="fighter-image">
                      <div class="image-overlay">
                        <div class="overlay-text">ANSWER</div>
                      </div>
                    <% else %>
                      <div class="fighter-placeholder">
                        <div class="placeholder-icon">👤</div>
                        <div class="placeholder-text">No Image</div>
                      </div>
                    <% end %>
                  </div>
                  
                  <div class="fighter-details">
                    <div class="answer-label">正解</div>
                    <h1 class="fighter-name"><%= @quiz_session.target_fighter.display_name %></h1>
                  </div>
                </div>
              </div>
              
              <!-- 勝者表示 -->
              <div class="winner-section">
                <% if @quiz_session.winner_user %>
                  <div class="winner-announcement">
                    <div class="winner-crown">👑</div>
                    <h2 class="winner-title">CHAMPION</h2>
                    <h3 class="winner-name"><%= @quiz_session.winner_user.name %></h3>
                    <div class="winner-effects">
                      <div class="sparkle">✨</div>
                      <div class="sparkle">🎊</div>
                      <div class="sparkle">⭐</div>
                    </div>
                  </div>
                <% else %>
                  <% max_points = @quiz_session.quiz_participants.maximum(:points) || 0 %>
                  <% top_count = @quiz_session.quiz_participants.where(points: max_points).count %>
                  <div class="no-winner-section">
                    <% if top_count > 1 %>
                      <div class="tie-announcement">
                        <div class="tie-icon">🤝</div>
                        <h3 class="tie-title">TIE GAME!</h3>
                        <p class="tie-message">複数のチャンピオン</p>
                      </div>
                    <% else %>
                      <div class="no-winner-announcement">
                        <div class="no-winner-icon">😤</div>
                        <h3 class="no-winner-title">NO CHAMPION</h3>
                        <p class="no-winner-message">もう一度挑戦しよう！</p>
                      </div>
                    <% end %>
                  </div>
                <% end %>
              </div>
            </div>
          </div>
        </div>

      <% end %>
    </div>

    <!-- サイドバー：参加者リスト -->
    <div class="col-md-4">
      <div class="card">
        <div class="card-header">
          <h5 class="mb-0">👥 参加者 (<%= @participants.count %>人)</h5>
        </div>
        <div class="card-body">
          <ul class="list-group">
            <% @participants.each do |participant| %>
              <li class="list-group-item d-flex justify-content-between align-items-center" data-user-id="<%= participant.user_id %>">
                <div>
                  <%= participant.user.name %>
                  <% if participant.is_winner %>
                    <span class="badge bg-warning text-dark ms-2">🏆</span>
                  <% end %>
                </div>
                <div>
                  <% if participant.answered? %>
                    <span class="badge bg-success participant-status">正解</span>
                  <% elsif @quiz_session.started? %>
                    <% current_hint_answer = @current_hint_answers&.dig(participant.user_id) %>
                    <% if current_hint_answer %>
                      <% if current_hint_answer.passed? %>
                        <span class="badge bg-secondary participant-status">パス</span>
                      <% else %>
                        <span class="badge bg-warning participant-status">不正解</span>
                      <% end %>
                    <% else %>
                      <span class="thinking-spinner participant-status"></span>
                    <% end %>
                  <% end %>
                  <% if @quiz_session.ended? %>
                    <span class="badge bg-primary"><%= participant.points %>pt</span>
                  <% end %>
                </div>
              </li>
            <% end %>
          </ul>
        </div>
      </div>

      <% if @quiz_session.ended? %>
        <div class="card mt-3">
          <div class="card-header">
            <h5 class="mb-0">📊 最終結果</h5>
          </div>
          <div class="card-body">
            <ol class="list-group list-group-numbered">
              <% @participants.by_points.each_with_index do |participant, index| %>
                <li class="list-group-item d-flex justify-content-between align-items-center">
                  <div>
                    <%= participant.user.name %>
                  </div>
                  <div>
                    <span class="badge bg-primary"><%= participant.points %>pt</span>
                    <span class="badge bg-danger">ミス: <%= participant.miss_count %>回</span>
                  </div>
                </li>
              <% end %>
            </ol>
          </div>
        </div>
      <% end %>
    </div>
  </div>
</div>

<!-- カスタムCSS（全ての状態で適用） -->
<style>
          .quiz-result-container {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 20px;
            padding: 0;
            box-shadow: 0 20px 40px rgba(0,0,0,0.3);
            overflow: hidden;
            position: relative;
          }
          
          .quiz-result-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" patternUnits="userSpaceOnUse" width="100" height="100"><circle cx="25" cy="25" r="1" fill="white" opacity="0.1"/><circle cx="75" cy="25" r="1" fill="white" opacity="0.1"/><circle cx="25" cy="75" r="1" fill="white" opacity="0.1"/><circle cx="75" cy="75" r="1" fill="white" opacity="0.1"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
            pointer-events: none;
          }

          .result-main-card {
            background: rgba(255,255,255,0.95);
            backdrop-filter: blur(10px);
            margin: 3px;
            border-radius: 17px;
            overflow: hidden;
          }

          .result-header {
            background: linear-gradient(45deg, #ff6b6b, #feca57);
            padding: 30px;
            text-align: center;
            position: relative;
          }

          .result-title {
            font-size: 2.5rem;
            font-weight: 900;
            color: white;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            margin: 0;
            letter-spacing: 2px;
          }

          .title-icon {
            display: inline-block;
            font-size: 3rem;
            margin-right: 15px;
            animation: bounce 2s infinite;
          }

          .completion-badge {
            margin-top: 15px;
          }

          .badge-text {
            background: rgba(0,0,0,0.3);
            color: white;
            padding: 8px 20px;
            border-radius: 50px;
            font-weight: bold;
            text-transform: uppercase;
            letter-spacing: 1px;
            font-size: 0.9rem;
          }

          .result-body {
            padding: 40px;
          }

          .fighter-reveal-section {
            text-align: center;
            margin-bottom: 40px;
          }

          .fighter-info-container {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 30px;
            flex-wrap: wrap;
          }

          .fighter-image-wrapper {
            position: relative;
            border-radius: 20px;
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            transition: transform 0.3s ease;
          }

          .fighter-image-wrapper:hover {
            transform: scale(1.05) rotate(1deg);
          }

          .fighter-image {
            width: 200px;
            height: 250px;
            object-fit: cover;
            display: block;
          }

          .fighter-placeholder {
            width: 200px;
            height: 250px;
            background: linear-gradient(135deg, #ff9a9e, #fecfef);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            color: white;
          }

          .placeholder-icon {
            font-size: 4rem;
            margin-bottom: 10px;
          }

          .placeholder-text {
            font-weight: bold;
            font-size: 1.2rem;
          }

          .image-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(45deg, rgba(255,107,107,0.8), rgba(254,202,87,0.8));
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0;
            transition: opacity 0.3s ease;
          }

          .fighter-image-wrapper:hover .image-overlay {
            opacity: 1;
          }

          .overlay-text {
            color: white;
            font-size: 1.5rem;
            font-weight: bold;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
          }

          .fighter-details {
            text-align: left;
            max-width: 300px;
          }

          .answer-label {
            background: linear-gradient(45deg, #ff6b6b, #feca57);
            color: white;
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: bold;
            display: inline-block;
            margin-bottom: 15px;
            text-transform: uppercase;
          }

          .fighter-name {
            font-size: 2.2rem;
            font-weight: 900;
            color: #333;
            margin: 0 0 15px 0;
            line-height: 1.2;
          }

          .fighter-meta {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
          }

          .meta-item {
            background: #f8f9fa;
            color: #666;
            padding: 8px 12px;
            border-radius: 15px;
            font-size: 0.9rem;
            border: 2px solid #e9ecef;
          }

          .winner-section {
            text-align: center;
            padding: 30px;
            background: linear-gradient(135deg, #ffecd2, #fcb69f);
            border-radius: 20px;
            position: relative;
            overflow: hidden;
          }

          .winner-announcement {
            position: relative;
            z-index: 2;
          }

          .winner-crown {
            font-size: 4rem;
            margin-bottom: 10px;
            animation: float 3s ease-in-out infinite;
          }

          .winner-title {
            font-size: 2rem;
            font-weight: 900;
            color: #333;
            margin: 10px 0;
            text-transform: uppercase;
            letter-spacing: 2px;
          }

          .winner-name {
            font-size: 2.5rem;
            font-weight: 800;
            color: #ff6b6b;
            margin: 15px 0;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
          }

          .winner-effects {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            pointer-events: none;
          }

          .sparkle {
            position: absolute;
            font-size: 2rem;
            animation: sparkle 2s infinite;
          }

          .sparkle:nth-child(1) {
            top: 20%;
            left: 20%;
            animation-delay: 0s;
          }

          .sparkle:nth-child(2) {
            top: 30%;
            right: 20%;
            animation-delay: 0.7s;
          }

          .sparkle:nth-child(3) {
            bottom: 20%;
            left: 30%;
            animation-delay: 1.4s;
          }

          .no-winner-section {
            padding: 20px;
            text-align: center;
          }

          .tie-announcement, .no-winner-announcement {
            background: rgba(255,255,255,0.9);
            padding: 30px;
            border-radius: 15px;
            border: 3px dashed #ccc;
          }

          .tie-icon, .no-winner-icon {
            font-size: 3rem;
            margin-bottom: 15px;
          }

          .tie-title, .no-winner-title {
            font-size: 1.8rem;
            font-weight: bold;
            color: #666;
            margin: 10px 0;
          }

          .tie-message, .no-winner-message {
            color: #888;
            font-size: 1.1rem;
          }

          @keyframes bounce {
            0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
            40% { transform: translateY(-10px); }
            60% { transform: translateY(-5px); }
          }

          @keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-10px); }
          }

          @keyframes sparkle {
            0%, 100% { opacity: 0; transform: scale(0.5) rotate(0deg); }
            50% { opacity: 1; transform: scale(1.2) rotate(180deg); }
          }

          /* ========== クイズ回答画面用CSS ========== */
          
          /* ヒント表示スタイル */
          .hint-container {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 20px;
            padding: 0;
            box-shadow: 0 15px 35px rgba(0,0,0,0.2);
            overflow: hidden;
            position: relative;
          }

          .hint-main-card {
            background: rgba(255,255,255,0.95);
            backdrop-filter: blur(10px);
            margin: 3px;
            border-radius: 17px;
            overflow: hidden;
          }

          .hint-header {
            background: linear-gradient(45deg, #4facfe, #00f2fe);
            padding: 25px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            position: relative;
          }

          .hint-number-badge {
            background: rgba(255,255,255,0.3);
            border: 2px solid rgba(255,255,255,0.5);
            border-radius: 50px;
            padding: 8px 16px;
            min-width: 60px;
            text-align: center;
          }

          .hint-number {
            font-size: 1.2rem;
            font-weight: bold;
            color: white;
          }

          .hint-title {
            font-size: 1.8rem;
            font-weight: 900;
            color: white;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            margin: 0;
            letter-spacing: 1px;
            display: flex;
            align-items: center;
            gap: 10px;
          }

          .hint-icon {
            font-size: 2rem;
            animation: pulse 2s infinite;
          }

          .hint-body {
            padding: 30px;
          }

          .hint-content {
            text-align: center;
          }

          .hint-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 30px;
            margin-bottom: 25px;
            flex-wrap: wrap;
            max-width: 400px;
            margin-left: auto;
            margin-right: auto;
          }

          .category-badge {
            background: linear-gradient(45deg, #ff6b6b, #feca57);
            color: white;
            padding: 8px 20px;
            border-radius: 50px;
            font-weight: bold;
            text-transform: uppercase;
            font-size: 0.9rem;
          }

          .level-indicator {
            text-align: center;
          }

          .level-label {
            font-size: 0.8rem;
            color: #666;
            font-weight: bold;
            margin-bottom: 5px;
          }

          .level-value {
            font-size: 1.2rem;
          }

          .level-1 { color: #ff4757; }
          .level-2 { color: #ffa502; }
          .level-3 { color: #2ed573; }

          .feature-display {
            position: relative;
            margin: 30px 0;
          }

          .feature-text {
            font-size: 1.8rem;
            font-weight: bold;
            color: #333;
            font-style: italic;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
            margin-bottom: 20px;
          }

          .hint-decoration {
            display: flex;
            justify-content: center;
            gap: 20px;
          }

          .decoration-element {
            font-size: 1.5rem;
            animation: float 3s ease-in-out infinite;
          }

          .decoration-element:nth-child(1) { animation-delay: 0s; }
          .decoration-element:nth-child(2) { animation-delay: 0.5s; }
          .decoration-element:nth-child(3) { animation-delay: 1s; }

          /* 回答フォームスタイル */
          .answer-container {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            border-radius: 20px;
            padding: 0;
            box-shadow: 0 15px 35px rgba(0,0,0,0.2);
            overflow: hidden;
          }

          .answer-main-card {
            background: rgba(255,255,255,0.95);
            backdrop-filter: blur(10px);
            margin: 3px;
            border-radius: 17px;
            overflow: hidden;
          }

          .answer-header {
            background: linear-gradient(45deg, #ff6b6b, #feca57);
            padding: 20px 30px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 20px;
          }

          .answer-icon {
            font-size: 2.5rem;
            animation: bounce 2s infinite;
          }

          .answer-title {
            font-size: 1.6rem;
            font-weight: 900;
            color: white;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            margin: 0;
            letter-spacing: 1px;
            flex: 1;
            text-align: center;
          }

          .miss-counter {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 5px;
          }

          .miss-label {
            font-size: 0.8rem;
            color: rgba(255,255,255,0.8);
            font-weight: bold;
          }

          .miss-value {
            display: flex;
            align-items: center;
            gap: 5px;
            background: rgba(0,0,0,0.2);
            padding: 5px 10px;
            border-radius: 20px;
          }

          .miss-number {
            font-size: 1.2rem;
            font-weight: bold;
            color: white;
          }

          .miss-icon {
            font-size: 1rem;
          }

          .answer-body {
            padding: 30px;
          }

          .fighter-search-section {
            margin-bottom: 25px;
          }

          .search-label-container {
            margin-bottom: 15px;
          }

          .search-label {
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 1.1rem;
            font-weight: bold;
            color: #333;
          }

          .search-icon {
            font-size: 1.3rem;
          }

          .search-input-wrapper {
            position: relative;
          }

          .fighter-search-input {
            width: 100%;
            padding: 15px 20px;
            border: 3px solid #e1e8ed;
            border-radius: 15px;
            font-size: 1.1rem;
            transition: all 0.3s ease;
            background: white;
            box-shadow: inset 0 2px 4px rgba(0,0,0,0.1);
          }

          .fighter-search-input:focus {
            border-color: #667eea;
            outline: none;
            box-shadow: 0 0 20px rgba(102,126,234,0.3);
            transform: scale(1.02);
          }

          .suggestions-container {
            position: relative;
            z-index: 100;
          }

          .suggestions-container .list-group-item {
            border: none;
            border-radius: 10px;
            margin: 5px 0;
            transition: all 0.3s ease;
            background: linear-gradient(45deg, #f8f9fa, #e9ecef);
          }

          .suggestions-container .list-group-item:hover {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            transform: translateX(10px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
          }

          .action-buttons {
            display: flex;
            justify-content: center;
            margin: 25px 0;
          }

          .submit-btn {
            position: relative;
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 15px 40px;
            border-radius: 50px;
            font-size: 1.1rem;
            font-weight: bold;
            text-transform: uppercase;
            letter-spacing: 1px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 10px;
            overflow: hidden;
          }

          .submit-btn:enabled:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 25px rgba(102,126,234,0.4);
          }

          .submit-btn:disabled {
            background: #ccc;
            cursor: not-allowed;
            opacity: 0.6;
          }

          .btn-icon {
            font-size: 1.3rem;
          }

          .pass-section {
            text-align: center;
            margin-top: 20px;
          }

          .pass-btn {
            background: linear-gradient(45deg, #95a5a6, #7f8c8d);
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 25px;
            font-weight: bold;
            text-transform: uppercase;
            letter-spacing: 1px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
          }

          .pass-btn:hover {
            background: linear-gradient(45deg, #7f8c8d, #95a5a6);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
          }

          /* ステータス表示スタイル */
          .status-container {
            position: relative;
          }

          .status-card {
            border-radius: 20px;
            padding: 0;
            box-shadow: 0 15px 35px rgba(0,0,0,0.2);
            overflow: hidden;
            position: relative;
          }

          .success-status {
            background: linear-gradient(135deg, #2ed573 0%, #17c0eb 100%);
          }

          .pass-status {
            background: linear-gradient(135deg, #95a5a6 0%, #7f8c8d 100%);
          }

          .incorrect-status {
            background: linear-gradient(135deg, #ff4757 0%, #ff3742 100%);
          }

          .status-header {
            padding: 25px;
            text-align: center;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 15px;
          }

          .status-icon {
            font-size: 3rem;
          }

          .success-icon { animation: bounce 2s infinite; }
          .pass-icon { animation: float 3s ease-in-out infinite; }
          .incorrect-icon { animation: shake 1s infinite; }

          .status-title {
            font-size: 2rem;
            font-weight: 900;
            color: white;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            margin: 0;
            letter-spacing: 2px;
          }

          .status-body {
            background: rgba(255,255,255,0.95);
            backdrop-filter: blur(10px);
            padding: 25px;
            text-align: center;
          }

          .status-message {
            font-size: 1.2rem;
            font-weight: bold;
            color: #333;
            margin-bottom: 15px;
          }

          .waiting-animation {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
          }

          .waiting-text {
            color: #666;
            font-size: 1rem;
          }

          .loading-dots span {
            font-size: 1.5rem;
            animation: loading-dots 1.5s infinite;
          }

          .loading-dots span:nth-child(1) { animation-delay: 0s; }
          .loading-dots span:nth-child(2) { animation-delay: 0.3s; }
          .loading-dots span:nth-child(3) { animation-delay: 0.6s; }

          .status-decoration {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            pointer-events: none;
          }

          .celebration-particle, .incorrect-particle {
            position: absolute;
            font-size: 2rem;
            animation: particle-float 3s infinite;
          }

          .celebration-particle:nth-child(1) {
            top: 20%;
            left: 20%;
            animation-delay: 0s;
          }

          .celebration-particle:nth-child(2) {
            top: 30%;
            right: 20%;
            animation-delay: 1s;
          }

          .celebration-particle:nth-child(3) {
            bottom: 20%;
            left: 30%;
            animation-delay: 2s;
          }

          .incorrect-particle {
            top: 50%;
            right: 20%;
            animation: explosion 1s infinite;
          }

          /* アニメーションキーフレーム */
          @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.1); }
          }

          @keyframes loading-dots {
            0%, 60%, 100% { opacity: 0; transform: translateY(0); }
            30% { opacity: 1; transform: translateY(-10px); }
          }

          @keyframes particle-float {
            0%, 100% { transform: translateY(0px) rotate(0deg); opacity: 0.7; }
            50% { transform: translateY(-20px) rotate(180deg); opacity: 1; }
          }

          @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            75% { transform: translateX(5px); }
          }

          @keyframes explosion {
            0% { transform: scale(1) rotate(0deg); opacity: 1; }
            50% { transform: scale(1.3) rotate(180deg); opacity: 0.7; }
            100% { transform: scale(1) rotate(360deg); opacity: 1; }
          }

          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }

          .thinking-spinner {
            display: inline-block;
            width: 18px;
            height: 18px;
            border: 2px solid rgba(108, 117, 125, 0.3);
            border-left-color: #6c757d;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            vertical-align: middle;
          }

          @media (max-width: 768px) {
            .fighter-info-container {
              flex-direction: column;
              text-align: center;
            }
            
            .fighter-details {
              text-align: center;
            }
            
            .result-title {
              font-size: 2rem;
            }
            
            .fighter-name {
              font-size: 1.8rem;
            }
            
            .winner-name {
              font-size: 2rem;
            }

            .hint-meta {
              flex-direction: column;
              gap: 10px;
            }

            .answer-header {
              flex-direction: column;
              gap: 15px;
            }

            .feature-text {
              font-size: 1.4rem;
            }

            .hint-title, .answer-title {
              font-size: 1.4rem;
            }
          }
          
          /* ローディング状態のボタンスタイル */
          .loading {
            position: relative;
            pointer-events: none;
            opacity: 0.8;
          }
          
          .loading .btn-text {
            opacity: 0;
          }
          
          .loading .btn-icon,
          .loading .pass-icon {
            opacity: 0;
          }
          
          .loading-text {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 0.9rem;
            font-weight: 500;
            white-space: nowrap;
            color: white;
          }
          
          .loading-dots {
            display: inline-block;
          }
          
          .loading-dots span {
            animation: dot-flashing 1.4s infinite linear alternate;
            animation-delay: calc(var(--delay) * 0.2s);
          }
          
          @keyframes dot-flashing {
            0% {
              opacity: 0.2;
            }
            50%, 100% {
              opacity: 1;
            }
          }

          /* 接続状況表示のスタイル */
          #connection-status {
            background: rgba(255,255,255,0.1);
            border-radius: 10px;
            padding: 15px;
            border: 1px solid rgba(255,255,255,0.2);
          }

          .connection-info {
            font-size: 1.1rem;
            font-weight: 600;
            color: #333;
            margin-bottom: 8px;
          }

          .connection-label {
            color: #666;
          }

          #connected-count {
            color: #28a745;
            font-weight: bold;
          }

          .participant-waiting {
            text-align: center;
          }

          #participant-connection-status .badge {
            font-size: 0.9rem;
            padding: 8px 12px;
          }

          #start-button-container {
            text-align: center;
            margin-top: 20px;
          }

          #start-game-btn {
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
          }

          #start-game-btn:not(:disabled):hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(0,0,0,0.2);
          }

          #start-game-btn:disabled {
            opacity: 0.7;
          }

          /* リロードボタンのスタイル */
          .reload-button-container {
            border-top: 1px solid rgba(255,255,255,0.3);
            padding-top: 15px;
          }

          #reload-btn {
            transition: all 0.3s ease;
            border: 2px solid #007bff;
            background: transparent;
          }

          #reload-btn:hover {
            background: #007bff;
            color: white;
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0,123,255,0.3);
          }

          #reload-btn .btn-icon {
            display: inline-block;
            margin-right: 5px;
            transition: transform 0.3s ease;
          }

          #reload-btn:hover .btn-icon {
            transform: rotate(180deg);
          }

          .auto-reload-info {
            opacity: 0.8;
          }

          #countdown {
            font-weight: bold;
            color: #007bff;
          }
        </style>

<script>
// グローバル変数でボタンを保持
let currentSubmitButton = null;
let currentPassButton = null;

// ローディング状態の制御関数（グローバル）
function setButtonLoading(button, message) {
  button.classList.add('loading');
  button.disabled = true;
  
  // ローディングテキストを追加（ドット部分は分離）
  const loadingText = document.createElement('div');
  loadingText.className = 'loading-text';
  
  // テキストを「他の人を待機中」と「...」に分割
  const textPart = message.replace('...', '');
  const dotsHtml = `
    <span class="loading-dots">
      <span style="--delay: 0">.</span>
      <span style="--delay: 1">.</span>
      <span style="--delay: 2">.</span>
    </span>
  `;
  
  loadingText.innerHTML = textPart + dotsHtml;
  button.appendChild(loadingText);
}

function removeButtonLoading(button) {
  if (!button) return;
  button.classList.remove('loading');
  button.disabled = false;
  
  // ローディングテキストを削除
  const loadingText = button.querySelector('.loading-text');
  if (loadingText) loadingText.remove();
}

// 全てのボタンのローディング状態を解除
function clearAllButtonLoading() {
  if (currentSubmitButton) {
    removeButtonLoading(currentSubmitButton);
  }
  if (currentPassButton) {
    removeButtonLoading(currentPassButton);
  }
}

function initializeQuizAutocomplete() {
  console.log('DOMContentLoaded fired');
  
  const searchInput = document.getElementById('fighter-search');
  const suggestionsDiv = document.getElementById('fighter-suggestions');
  const fighterIdInput = document.getElementById('fighter-id');
  const submitButton = document.getElementById('submit-answer');
  
  // グローバル変数に設定
  currentSubmitButton = submitButton;
  
  console.log('Elements found:', {
    searchInput: !!searchInput,
    suggestionsDiv: !!suggestionsDiv,
    fighterIdInput: !!fighterIdInput,
    submitButton: !!submitButton
  });
  
  if (searchInput && suggestionsDiv && fighterIdInput && submitButton) {
    console.log('All elements found, setting up autocomplete');
    
    searchInput.addEventListener('input', function() {
      const query = this.value;
      
      if (query.length < 2) {
        suggestionsDiv.innerHTML = '';
        fighterIdInput.value = '';
        submitButton.disabled = true;
        return;
      }
      
      fetch(`/fighters.json?q=${encodeURIComponent(query)}`)
        .then(response => response.json())
        .then(fighters => {
          suggestionsDiv.innerHTML = '';
          
          fighters.slice(0, 5).forEach(fighter => {
            const item = document.createElement('a');
            item.href = '#';
            item.className = 'list-group-item list-group-item-action';
            item.textContent = fighter.display_name;
            item.dataset.fighterId = fighter.id;
            
            item.addEventListener('click', function(e) {
              e.preventDefault();
              searchInput.value = fighter.full_name;
              fighterIdInput.value = fighter.id;
              submitButton.disabled = false;
              submitButton.removeAttribute('disabled');
              suggestionsDiv.innerHTML = '';
              console.log('Fighter selected:', fighter.display_name, 'ID:', fighter.id);
            });
            
            suggestionsDiv.appendChild(item);
          });
        });
    });
  }
  
  // フォーム送信を確実にする
  const form = document.getElementById('answer-form');
  const submitBtn = document.getElementById('submit-answer');
  
  if (form && submitBtn) {
    console.log('Form and submit button found');
    
    form.addEventListener('submit', function(e) {
      e.preventDefault(); // 通常の送信を防ぐ
      console.log('Form submit event triggered');
      const fighterIdValue = document.getElementById('fighter-id').value;
      console.log('Fighter ID:', fighterIdValue);
      
      if (!fighterIdValue) {
        alert('選手を選択してください。');
        return false;
      }
      
      console.log('Submitting via fetch...');
      
      // ローディング状態にする
      setButtonLoading(submitButton, '他の人を待機中...');
      
      // fetchでPOSTリクエストを送信
      const token = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
      const formData = new FormData();
      formData.append('fighter_id', fighterIdValue);
      
      fetch('<%= submit_answer_quiz_session_path(@quiz_session) %>', {
        method: 'POST',
        body: formData,
        headers: {
          'X-CSRF-Token': token,
          'X-Requested-With': 'XMLHttpRequest',
          'Accept': 'application/json'
        }
      }).then(response => {
        if (response.ok) {
          return response.json();
        } else {
          throw new Error('Request failed');
        }
      }).then(data => {
        console.log('Success:', data);
        // 明示的にリロードが必要な場合のみリロード
        if (data.redirect === true) {
          window.location.reload();
        }
        // メッセージを表示
        if (data.message) {
          showMessage(data.message);
        }
        // ローディング状態は次のヒント/結果まで維持
      }).catch(error => {
        console.error('Error:', error);
        // エラー時のみローディング状態を解除
        removeButtonLoading(submitButton);
        alert('エラーが発生しました。');
      });
    });
    
    // パスボタンのAJAX処理
    const passBtn = document.getElementById('pass-btn');
    currentPassButton = passBtn; // グローバル変数に設定
    if (passBtn) {
      passBtn.addEventListener('click', function() {
        // ローディング状態にする
        setButtonLoading(passBtn, '他の人を待機中...');
        
        const token = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
        
        fetch('<%= pass_quiz_session_path(@quiz_session) %>', {
          method: 'PATCH',
          headers: {
            'X-CSRF-Token': token,
            'X-Requested-With': 'XMLHttpRequest',
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          }
        }).then(response => {
          if (response.ok) {
            return response.json();
          } else {
            throw new Error('Request failed');
          }
        }).then(data => {
          console.log('Pass Success:', data);
          // AJAXレスポンスの場合はリロードしない
          if (data.redirect !== false) {
            window.location.reload();
          }
          // メッセージを表示
          if (data.message) {
            showMessage(data.message);
          }
          // ローディング状態は次のヒント/結果まで維持
        }).catch(error => {
          console.error('Pass Error:', error);
          // エラー時のみローディング状態を解除
          removeButtonLoading(passBtn);
          alert('パス処理でエラーが発生しました。');
        });
      });
    }
  } else {
    console.log('Some elements not found');
  }

  // メッセージ表示機能
  function showMessage(message) {
    // 既存の通知を削除
    const existingNotice = document.querySelector('.ajax-notice');
    if (existingNotice) {
      existingNotice.remove();
    }
    
    // 新しい通知を作成
    const notice = document.createElement('div');
    notice.className = 'ajax-notice';
    notice.style.cssText = 'position: fixed; top: 20px; right: 20px; background: #d4edda; color: #155724; padding: 15px; border-radius: 5px; z-index: 1000; max-width: 300px;';
    notice.textContent = message;
    
    document.body.appendChild(notice);
    
    // 3秒後に自動削除
    setTimeout(() => {
      notice.remove();
    }, 3000);
  }
}

// ActionCableによるリアルタイム更新
function setupQuizSubscription() {
  if (!window.App || !window.App.cable) {
    console.error('ActionCable not available for quiz, retrying in 1 second...');
    setTimeout(setupQuizSubscription, 1000);
    return;
  }
  
  const quizSessionId = <%= @quiz_session.id %>;
  
  console.log('Setting up ActionCable subscription for quiz session:', quizSessionId);
  
  window.App.cable.subscriptions.create({
    channel: "QuizSessionChannel",
    quiz_session_id: quizSessionId
  }, {
    connected() {
      console.log("Connected to QuizSessionChannel");
    },
    
    disconnected() {
      console.log("Disconnected from QuizSessionChannel");
    },
    
    received(data) {
      console.log("Received data:", data);
      
      switch(data.type) {
        case 'participant_answered':
          // 参加者が回答した時の処理
          updateParticipantStatus(data.user_id, data.status);
          break;
        case 'next_hint':
          // 次のヒントに進んだ時 - ローディング解除してからリロード
          clearAllButtonLoading();
          window.location.reload();
          break;
        case 'game_ended':
          // ゲーム終了時 - ローディング解除してからリロード
          clearAllButtonLoading();
          window.location.reload();
          break;
        case 'session_started':
          // セッション開始時 - ローディング解除してからリロード
          clearAllButtonLoading();
          window.location.reload();
          break;
        case 'connection_updated':
          // 接続状況が更新された時
          updateConnectionStatus(data);
          break;
      }
    }
  });
}

function updateParticipantStatus(userId, status) {
  // 参加者リストの状態を更新
  const participantElements = document.querySelectorAll('[data-user-id="' + userId + '"]');
  participantElements.forEach(element => {
    const statusBadge = element.querySelector('.participant-status');
    if (statusBadge) {
      statusBadge.className = 'badge participant-status';
      switch(status) {
        case 'correct':
          statusBadge.classList.add('bg-success');
          statusBadge.textContent = '正解';
          break;
        case 'incorrect':
          statusBadge.classList.add('bg-warning');
          statusBadge.textContent = '不正解';
          break;
        case 'passed':
          statusBadge.classList.add('bg-secondary');
          statusBadge.textContent = 'パス';
          break;
      }
    }
  });
}

function updateConnectionStatus(data) {
  // 接続カウントを更新
  const connectedCountElement = document.getElementById('connected-count');
  const totalCountElement = document.getElementById('total-count');
  const progressElement = document.getElementById('connection-progress');
  const startButton = document.getElementById('start-game-btn');
  
  if (connectedCountElement) {
    connectedCountElement.textContent = data.connected_count;
  }
  
  if (totalCountElement) {
    totalCountElement.textContent = data.total_count;
  }
  
  if (progressElement && data.total_count > 0) {
    const percentage = (data.connected_count / data.total_count) * 100;
    progressElement.style.width = percentage + '%';
  }
  
  // スタートボタンの状態を更新
  if (startButton) {
    if (data.all_connected && data.total_count >= 2) {
      startButton.disabled = false;
      startButton.className = 'btn btn-success btn-lg';
      startButton.querySelector('.btn-icon').textContent = '🚀';
      startButton.querySelector('.btn-text').textContent = 'ゲームを開始';
      startButton.onclick = startGame;
    } else {
      startButton.disabled = true;
      startButton.className = 'btn btn-secondary btn-lg';
      startButton.querySelector('.btn-icon').textContent = '⏳';
      startButton.querySelector('.btn-text').textContent = '全員の接続を待機中...';
      startButton.onclick = null;
    }
  }
  
  // 参加者の接続状況バッジを更新
  const participantConnectionStatus = document.getElementById('participant-connection-status');
  if (participantConnectionStatus) {
    // 現在のユーザーが接続済みかどうかは、WebSocketが動作している場合は接続済みと判断
    const badge = participantConnectionStatus.querySelector('.badge');
    if (badge) {
      badge.className = 'badge bg-success';
      badge.textContent = '✓ 接続済み';
    }
  }
}

function startGame() {
  const startButton = document.getElementById('start-game-btn');
  if (startButton) {
    setButtonLoading(startButton, '開始中...');
    
    const token = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
    
    fetch('<%= start_quiz_session_path(@quiz_session) %>', {
      method: 'PATCH',
      headers: {
        'X-CSRF-Token': token,
        'X-Requested-With': 'XMLHttpRequest',
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      }
    }).then(response => {
      if (response.ok) {
        return response.json();
      } else {
        throw new Error('Request failed');
      }
    }).then(data => {
      console.log('Start game response:', data);
      if (data.status === 'success') {
        // 成功の場合はWebSocketでセッション開始の通知が来るのでそこでリロード
        showMessage(data.message);
      } else if (data.status === 'waiting') {
        // まだ全員接続していない場合
        removeButtonLoading(startButton);
        showMessage(data.message);
      } else {
        // エラーの場合
        removeButtonLoading(startButton);
        showMessage(data.message || 'エラーが発生しました。');
      }
    }).catch(error => {
      console.error('Start game error:', error);
      removeButtonLoading(startButton);
      alert('ゲーム開始でエラーが発生しました。');
    });
  }
}

// 待機画面での自動リロード機能
function setupAutoReload() {
  // 待機画面かどうかを確認
  const isWaitingState = <%= @quiz_session.waiting? ? 'true' : 'false' %>;
  if (!isWaitingState) return;
  
  let countdown = 10;
  const countdownElement = document.getElementById('countdown');
  const autoReloadInfo = document.getElementById('auto-reload-info');
  
  if (!countdownElement || !autoReloadInfo) return;
  
  const countdownTimer = setInterval(function() {
    countdown--;
    countdownElement.textContent = countdown;
    
    if (countdown <= 0) {
      clearInterval(countdownTimer);
      location.reload();
    }
  }, 1000);
  
  // 手動リロードボタンが押された場合はタイマーをクリア
  const reloadBtn = document.getElementById('reload-btn');
  if (reloadBtn) {
    reloadBtn.addEventListener('click', function() {
      clearInterval(countdownTimer);
    });
  }
  
  // ゲーム開始ボタンが押された場合もタイマーをクリア
  const startBtn = document.getElementById('start-game-btn');
  if (startBtn) {
    startBtn.addEventListener('click', function() {
      clearInterval(countdownTimer);
    });
  }
}

// DOMContentLoadedまたは即座に実行
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', function() {
    initializeQuizAutocomplete();
    setupQuizSubscription();
    setupAutoReload();
  });
} else {
  // DOMは既に読み込まれている
  initializeQuizAutocomplete();
  setupQuizSubscription();
  setupAutoReload();
}
</script>